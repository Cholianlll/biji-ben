# The following code uses the data from the anaesthetic depth example on
# page 27 of the brick and illustrates the three transformations usually used for 
# binary response data and how to draw a data plot such as the one shown on page 32
# of the brick:

# Read in the raw data:

ansthc <- read.table("Ansthc.txt",header=T)
ansthc
names(ansthc)
range(ansthc$Conc)
range(ansthc$Responded)

# Create a dummy plot with the right dimensions:

concs <- 3*(0:100)/100
probs <- 0:100/100
plot(concs, probs, type="n", xlab="Concentration", ylab="Response")

# Now add the details:

points(ansthc$Conc, ansthc$Responded)
title("(a) Raw Response Data") 
# this is the plot on the left at the bottom of page 27

# Reorganise the data by calculating the proportion who responded at each
# concentration:

ansth <- read.table("AnsthcSum.txt", header=T)
ansth
attach(ansth)
plot(concs, probs, type="n", xlab="Concentration", ylab="Proportion Responding")
points(conc, prptn)
title("(b) Proportional Response Data")
# this is the plot on the right at the bottom of page 27

# An unweighted regression:

ansth.reg <- lm(prptn ~ conc)
plot(concs, probs, type="n", xlab="Concentration", ylab="Proportion Responding")
points(conc, prptn)
coef(ansth.reg)
lines(concs, coef(ansth.reg)[1] + coef(ansth.reg)[2]*concs, lty=2)
prptn
fitted(ansth.reg)

# Now for an iteratively re-weighted least squares regression:

fts <- ifelse(fitted(ansth.reg)<=0,0.05,fitted(ansth.reg))
fts
wgt <- ssize/(fts*(1-fts))
wgt
ansth.reg <- lm(prptn ~ conc, weights=wgt)
prptn
fitted(ansth.reg)
  
# Repeat the above code until the fitted values "converge"!

lines(concs, coef(ansth.reg)[1] + coef(ansth.reg)[2]*concs, lty=1)
legend(1.5, 0.8, lty=1:2, c("Weighted", "Unweighted"))
title("(c) Weighted vs Unweighted Regression")
# this is the plot on page 30

# What we really need is a linearising (and variance stabilising)
# transformation that maps from proportions defined on [0,1] to
# the whole real line. We will examine the typical effects of the
# three transformations that are most commonly used:

# Probit
plot(probs, qnorm(probs), type="l", ylab="Probit transformation")
# Note the inverse transformation is already available as the pnorm() function

# Logit 
logit <- function(p){log(p/(1 - p))}
plot(probs, logit(probs), type="l", ylab="Logisitic transformation")
# Also need to create the inverse transformation for later use:
invlogit <- function(x){exp(x)/(1 + exp(x))}

# Complementary log-log
cloglog <- function(p){log( - log(1 - p))}
plot(probs,cloglog(probs),type="l", ylab="Complementary Log-Log transformation")
# Again we need to create the inverse transformation for later use:
invcloglog <- function(x){1 - exp(-exp(x))}

# Let's look at all three on the same graph:
plot(probs, logit(probs), type="l", xlab="Probability", ylab="Transformed Probability", lty=2)
lines(probs, qnorm(probs))
lines(probs, cloglog(probs), lty=3)
legend(0, 4, lty=1:3, c("Probit", "Logit", "Complementary Log-Log"))

# Note we still have some boundary problems:
qnorm(prptn)
logit(prptn)
cloglog(prptn)

prptn
prptn2 <- prptn
prptn2[5:6] <- 0.05
prptn2

qnorm(prptn2)
logit(prptn2)
cloglog(prptn2)

# Now let's transform the data:

plot(conc, logit(prptn2), pch="l", ylab="transformed prptn")
points(conc, qnorm(prptn2), pch="p")
points(conc, cloglog(prptn2), pch="c")

# Now fit and plot the three suggested GLMs from pages 31 & 32. Note that the glm() function
# will transform the data, deal with the boundary issues and apply the iterative variance
# weighting described above, so there is a little more going on in the background than 
# there was when we used lm().

ansth.prbt <- glm(prptn ~ conc, family=binomial(link=probit), weights=ssize)
coef(ansth.prbt)
prptn
fitted(ansth.prbt)
lines(conc, ansth.prbt$linear.predictors, lty=1)

ansth.lgt <- glm(prptn ~ conc, family=binomial(link=logit), weights=ssize)
coef(ansth.lgt)
prptn
fitted(ansth.lgt)
lines(conc, ansth.lgt$linear.predictors, lty=2)

ansth.cll <- glm(prptn ~ conc, family=binomial(link=cloglog), weights=ssize)
coef(ansth.cll)
prptn
fitted(ansth.cll)
lines(conc, ansth.cll$linear.predictors, lty=3)
legend(1.8, 1.25, lty=1:3, c("Probit", "Logit", "Complementary Log-Log"))

# Now a plot of the data and the GLMs on the original scale:

plot(concs, probs, type="n", xlab="Concentration", ylab="Proportion Responding")
points(conc, prptn)
lines(concs,pnorm(coef(ansth.prbt)[1] + coef(ansth.prbt)[2]*concs),lty=1)
lines(concs,invlogit(coef(ansth.lgt)[1] + coef(ansth.lgt)[2]*concs), lty=2)
lines(concs,invcloglog(coef(ansth.cll)[1] + coef(ansth.cll)[2]*concs), lty=3)
legend(1.25, 1, lty=1:3, c("Probit", "Logit", "Complementary Log-Log"))
title("(d) Generalised Linear Models for Anaesthetic Data")

# Note that lm() is a special case of glm(). For comparison, we could also fit an 
# ordinary Gaussian (normally distributed) GLM with an identity link:

ansth.olm <- glm(prptn ~ conc, family=gaussian(link="identity"))
ansth.olm

# Not surprisingly, this turns out to be the same as the simple unweighted linear
# regression model we examined earlier:

lm(prptn ~ conc)

# However, the lack of fit is obvious in the residual plots:

plot(ansth.olm)

# Whereas the GLMs have far less problems, for example, the logit model:

plot(ansth.lgt)

# More on residual plots for GLMs later!

# Finally, note what happens is we fit the logit model to the original
# individual level data (also note I don't really need to specify link=logit,
# as that is the default):

ansthc.lgt <- glm(ansthc$Responded ~ ansthc$Conc, family=binomial)
ansthc.lgt

# Compare this with the model fitted to the grouped or aggregate data:

ansth.lgt

# Same model coefficients, but different degrees of freedom! And that is
# not the only change, even though they appear to be much the same model
# (again, more on these issues later):

plot(ansthc.lgt)
