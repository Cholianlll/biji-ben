library(splines)
age<-40:80
mort<-0.02+(age-40)*0.0008+(age-40)^2*0.0003
mort<-mort/10+rnorm(41)*0.002
plot(age,mort,xlab="age",ylab="crude mortality rate")
fit<-lm(mort~ns(age,df=6))
values<-seq(40,80,0.01)
temp<-data.frame("age"=values)
fit<-predict(fit,temp)
lines(values,fit,col="red")

plot(age,mort,xlab="age",ylab="crude mortality rate")

fit<-lm(mort~ns(age,df=6))
values<-seq(40,80,0.01)
temp<-data.frame("age"=values)
fit<-predict(fit,temp)
lines(values,fit,col="red")

fit<-lm(mort~ns(age,df=1))
values<-seq(40,80,0.01)
temp<-data.frame("age"=values)
fit<-predict(fit,temp)
lines(values,fit,col="green")

fit<-lm(mort~ns(age,df=30))
values<-seq(40,80,0.01)
temp<-data.frame("age"=values)
fit<-predict(fit,temp)
lines(values,fit,col="blue")

########
#based on code from http://www.stat.sc.edu/~hitchcock
library(MASS)
body<-read.table("bodyfat.txt")
colnames(body)<-c('triceps', 'thigh', 'midarm', 'bodyfat')
round(cor(body),2)

> round(cor(body),2)
        triceps thigh midarm bodyfat
triceps    1.00  0.92   0.46    0.84
thigh      0.92  1.00   0.08    0.88
midarm     0.46  0.08   1.00    0.14
bodyfat    0.84  0.88   0.14    1.00
attach(body)

> select(lm.ridge(bodyfat ~ triceps + thigh + midarm, lambda = seq(0,1,0.02)))
modified HKB estimator is 0.008505093 
modified L-W estimator is 0.3098511 
smallest value of GCV  at 0.02 #"optimal value of lambda

fit.ridge<-lm.ridge(bodyfat ~ triceps + thigh + midarm, lambda = .019)
fit.lm<-lm(bodyfat ~ triceps + thigh + midarm)
round(coef(fit.ridge),2)
round(coef(fit.lm),2)
> round(coef(fit.ridge),2)
        triceps   thigh  midarm 
  43.84    2.12   -0.96   -1.02 
> round(coef(fit.lm),2)
(Intercept)     triceps       thigh      midarm 
     117.08        4.33       -2.86       -2.19 

########
library(glmnet)
#generating data
x<-matrix(rnorm(1000*50),50,1000)
y<-2*x[,1]+3*x[,2]+4*x[,3]+10*x[,100]+rnorm(50)
#fitting the laso
fit<-glmnet(x,y)
plot(fit,xvar="lambda")
fitcv<-cv.glmnet(x,y)
abline(v=fitcv$lambda.min)

########
set.seed(123)
x<-matrix(rnorm(50*5),50,5)
res<-rep(0,1000)

for(i in 1:1000) {

y<-rnorm(50) #none of the 5 covariates related to response
fit<-lm(y~x)
temp<-summary(fit)$coef[-1,3] #looking at test statistic for each covariate
temp<-ifelse(abs(temp)>1.96,1,0)
temp<-sum(temp)
res[i]<-ifelse(temp>0,1,0)  #1 if at least one covariate found to be sig at 5% level

}

sum(res)/1000
(1-0.95^5)

#even more tests

x<-matrix(rnorm(100*40),100,40)
res<-rep(0,1000)

for(i in 1:1000) {

y<-rnorm(100) #none of the 40 covariates related to response
fit<-lm(y~x)
temp<-summary(fit)$coef[-1,3] #looking at test statistic for each covariate
temp<-ifelse(abs(temp)>1.96,1,0)
temp<-sum(temp)
res[i]<-ifelse(temp>0,1,0)  #1 if at least one covariate found to be sig at 5% level

}

sum(res)/1000
(1-0.95^40)

#######
set.seed(123)
x<-c(9,10,22,7,13,13,7)
exp(mean(x)/10) # estimate

#using Boostrap
res<-rep(0,1000) #B=1000

for(i in 1:1000) {

xsamp<-sample(x,length(x),replace=TRUE)
res[i]<-exp(mean(xsamp)/10)

}

#bootstrap estimate of standard error
sqrt(var(res)) # estimate of standard error

#bootstrap 95% CI
quantile(res,c(0.025,0.975))
