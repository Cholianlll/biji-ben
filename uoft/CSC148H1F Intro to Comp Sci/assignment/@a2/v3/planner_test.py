# Assignment 2 - Unit Tests for Course (Sample tests)
#
# CSC148 Fall 2014, University of Toronto
# Instructor: David Liu
# ---------------------------------------------
import unittest

from planner import TermPlanner, parse_course_data
from course import Course


class TestParser(unittest.TestCase):

    def test_binary_simple(self):
        filename = 'tests/binary_simple.txt'

        actual = parse_course_data(filename)
        self.assertEqual('CSC207', actual.name)

        prereqs = actual.prereqs
        prereq_names = [p.name for p in prereqs]
        # User assertCountEqual when order doesn't matter
        self.assertCountEqual(['CSC165', 'CSC148'], prereq_names)

        for p in prereqs:
            self.assertEqual([], p.prereqs)


class TestIsValid(unittest.TestCase):
    def setUp(self):

        # Single prereq
        self.single = TermPlanner('tests/single.txt')
        self.full = TermPlanner('tests/full.txt')

    def test_single_two(self):
        self.assertTrue(self.single.is_valid([['CSC108'], ['CSC148']]))
    
    def test_nonexisting_class(self):
        self.assertFalse(self.full.is_valid([['AWE100', 'AWE12345']]))
    
    def test_duplicates(self):
        self.assertFalse(self.full.is_valid([['AWE100'], ['AWE100']]))
    
    def test_lack_prereq(self):
        self.assertFalse(self.full.is_valid([['AWE100'], ['AWE400']]))
    
    def test_term_not_greedy(self):
        self.assertTrue(self.full.is_valid([['AWE100', 'AWE199', 'AWE101']]))
        # this should be valid even if it's not greedy enough. on the other hand, it's not greedy because it's not generated by TermPlanner.

class TestPlanner(unittest.TestCase):
    def setUp(self):
        # Single prereq
        self.invalid = TermPlanner('tests/invalid_schedule.txt')
        self.single = TermPlanner('tests/single.txt')
        self.tp1 = TermPlanner('tests/tp1.txt')
        self.tp2 = TermPlanner('tests/tp2.txt')
        self.tp3 = TermPlanner('tests/tp3.txt')
        self.tp4 = TermPlanner('tests/tp4.txt') # useless
        

    def gen_test(self, tp, courses):
        s = tp.generate_schedule(courses)
        # Uncomment this line if you implement good_schedule.
        #self.assertTrue(good_schedule(tp, s, courses))
    
    def test_no_valid_schedule(self):
        self.gen_test(self.invalid, [])

    def test_one_prereq(self):
        self.gen_test(self.single, [['CSC108'], ['CSC148']])
        
    def test_multi_prereq(self):
        self.gen_test(self.tp1, [['a100', 'a101', 'a105', 'a133', 'a199'], ['a200']])

    def test_random_order_in_one_term(self):
        self.gen_test(self.tp1, [['a101', 'a105', 'a133', 'a199', 'a100'], ['a200']])
        # so the order does not matter
    
    def test_mix_prereq(self):
        self.gen_test(self.tp2, [['AWE100', 'BWE101', 'BWE199', 'CSC108'], ['AWE200, CSC148'], ['AWE300']])
        # this one is just for safety
    
    def test_greedy_enough(self):
        self.gen_test(self.tp3, [['a1', 'b1', 'c1', 'd1', 'e1'], ['a2', 'b2', 'c2', 'd2', 'e2'], ['a3', 'b3', 'f1']])
        self.gen_test(self.tp3, [['a1', 'b1', 'c1', 'd1', 'e1'], ['a2', 'b2', 'c2', 'd2', 'f1'], ['a3', 'b3', 'e2']])
        # this also tests 'AT MOST FIVE COURSES PER TERM'
    
    #def test_lonely_courses(self):
        ## some courses do not have prereqs, and they are not prereqs of any others!
        #self.gen_test(self.tp4, [['lone1', 'lone2', 'lone3', 'lone4', 'notlone1'], ['notlone2']])
        # forget about this since the course should SOMEHOW be in the course tree, a.k.a., be linked to other courses, so not alone!
    
    
    

def good_schedule(tp, schedule, courses):
    """ (TermPlanner, list of (list of str)) -> bool
    Return True if schedule is an acceptable output
    of tp.generate_courses(courses).
    """
    # Implement this function yourself if you want to use it!
    pass


if __name__ == '__main__':
    unittest.main(exit=False)
