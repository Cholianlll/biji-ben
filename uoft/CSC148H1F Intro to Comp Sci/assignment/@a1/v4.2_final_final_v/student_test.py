# Assignment 1 - Unit Tests for Student## CSC148 Fall 2014, University of Toronto# Instructor: David Liu# ---------------------------------------------# STUDENT INFORMATION## List your group members below, one per line, in format# <full name>, <utorid># Suyoung Lee, leesu9# Rui Qiu, qiurui2## ---------------------------------------------"""Unit tests for student.pySubmit this file, containing *thorough* unit testsfor your code in student.py.Note that you should not have any tests involvingstandard input or output in here."""import unittestfrom sms import *class SuperClassThing(unittest.TestCase):    def setUp(self):        self.school1 = School('Jason enrols in CSC148')        self.school1.student_create('Jason')        self.school1.student_create('Sally')        self.school1.enrol_student('Jason', 'CSC148')        self.course1 = object_caller('CSC148', self.school1.course_list)[1]        self.student1 = object_caller('Jason', self.school1.student_list)[1]        self.school2 = School('empty school')class TestCreate(SuperClassThing):    def test_add_student_simple(self):        self.assertTrue(object_caller('Jason', self.school1.student_list))    def test_add_duplicate_student(self):        self.assertRaises(StudentAlreadyExistsError,                          self.school1.student_create, 'Jason')class TestEnrol(SuperClassThing):    def test_enrol_student_simple(self):        self.assertTrue(self.student1 in self.school1.student_list)        self.assertTrue(self.course1 in self.school1.course_list)        self.assertEqual(['Jason'], self.course1.student_list)        self.assertEqual(['CSC148'], self.student1.course_list)    def test_enrol_nonexisting_student(self):        self.assertRaises(StudentNotExistError, self.school2.enrol_student,                          'Jason', 'CSC148')    def test_enrol_full_course(self):        count = 1        while count <= 30:            self.school2.student_create('Jason' + str(count))            self.school2.enrol_student('Jason' + str(count), 'CSC148')            count += 1        self.school2.student_create('Ja_son_of_error')        self.assertRaises(FullCourseError, self.school2.enrol_student,                          'Ja_son_of_error', 'CSC148')class TestDrop(SuperClassThing):    def test_drop_student_simple(self):        self.school1.course_drop('Jason', 'CSC148')        self.assertEqual([], self.student1.course_list)        self.assertEqual([self.course1], self.school1.course_list)    def test_drop_nonexisting_course(self):        self.school1.course_drop('Jason', 'ABC157')        # Since this should return nothing, no error message        # needed, if it passes, it's ok.class TestListCourses(SuperClassThing):    def test_student_list_courses_simple(self):        self.school1.enrol_student('Jason', 'ABC157')        self.school1.list_courses('Jason')        self.assertEqual(self.student1.course_list, ['ABC157', 'CSC148'])        # also tests the printing order.    def test_nonexisting_student_list_courses(self):        self.assertRaises(StudentNotExistError, self.school1.list_courses,                          'Mary')    def test_student_list_courses_empty(self):        self.school1.student_create('Rob')        self.school1.list_courses('Rob')        # though this prints a message that Rob is not taking any courses,        # it does not raise en error, so this should pass here.class TestCommonCourses(SuperClassThing):    def test_common_courses_nonexisting_students(self):        self.assertRaises(BothStudentsNotExistError,                          self.school1.common_check, 'Lee', 'Qiu')    def test_common_courses_nonexisting_student_1(self):        self.assertRaises(StudentNotExistError,                          self.school1.common_check, 'Lee', 'Jason')    def test_common_courses_nonexisting_student_2(self):        self.assertRaises(Student2NotExistError,                          self.school1.common_check, 'Jason', 'Qiu')    def test_no_common_courses(self):        self.school1.common_check('Jason', 'Sally')        # should generate no errorclass TestClassList(SuperClassThing):    def test_class_list_simple(self):        self.school1.enrol_student('Sally', 'CSC148')        self.school1.student_create('Ed')        self.school1.enrol_student('Ed', 'CSC148')        self.course1.class_list()        self.assertEqual(self.course1.student_list, ['Ed', 'Jason', 'Sally'])
    def test_class_list_nonexisting_course(self):        self.school1.class_list('CSC999')        # also should not generate any error.    def test_class_list_empty(self):        self.school1.course_drop('Jason', 'CSC148')        self.assertEqual(self.course1.student_list, [])class TestUndo(unittest.TestCase):    # We use the following setUp instead of the SuperClassThing    # setUp because we are going to play around with undo methods    # in an empty 'schoo', for convenience.    def setUp(self):        self.school1 = School('Jason enrols in CSC148')        self.school1.student_create('Jason')        self.school1.student_create('Sally')        self.school1.enrol_student('Jason', 'CSC148')        self.course1 = object_caller('CSC148', self.school1.course_list)[1]        self.student1 = object_caller('Jason', self.school1.student_list)[1]        student2 = object_caller('Sally', self.school1.student_list)[1]        self.school2 = School('empty school')    def test_undo_create(self):        self.school2.student_create('Ted')        self.school2.undo_once()        self.assertEqual([], self.school2.student_list)    def test_undo_enrol(self):        self.school2.student_create('Ted')        self.school2.enrol_student('Ted', 'CSC148')        self.school2.undo_once()        ted = object_caller('Ted', self.school2.student_list)[1]        self.assertEqual([], ted.course_list)
    def test_undo_drop(self):        self.school2.student_create('Ted')        self.school2.enrol_student('Ted', 'CSC148')        self.school2.course_drop('Ted', 'CSC148')        self.school2.undo_once()        ted = object_caller('Ted', self.school2.student_list)[1]        self.assertEqual(['CSC148'], ted.course_list)    def test_undo_undo(self):        self.school2.student_create('Ted')        ted = object_caller('Ted', self.school2.student_list)[1]        self.school2.enrol_student('Ted', 'CSC148')        course2 = object_caller('CSC148', self.school2.course_list)[1]        self.school2.course_drop('Ted', 'CSC148')        self.school2.undo_once()        self.school2.undo_once()        self.assertEqual([ted], self.school2.student_list)        self.assertEqual([], course2.student_list)    def test_undo_multiple(self):        self.school2.student_create('Ted')        self.school2.enrol_student('Ted', 'CSC148')        course1 = object_caller('CSC148', self.school2.course_list)[1]        self.school2.course_drop('Ted', 'CSC148')        self.school2.undo_repeat(3)        self.assertEqual([], self.school2.student_list)    def test_undo_valid_but_unrelated(self):        self.school2.student_create('Ted')        try:            self.school2.student_create('Ted')        except StudentAlreadyExistsError:            pass        self.school2.undo_once()        ted = object_caller('Ted', self.school2.student_list)[1]        self.assertEqual([ted], self.school2.student_list)    def test_undo_too_many_steps(self):        self.school2.student_create('James')        self.assertRaises(NoCommandsUndoError, self.school2.undo_repeat, 999)    def test_undo_non_pos_steps(self):        self.assertRaises(NotNaturalNumberUndoError,                          self.school2.undo_repeat, -5)if __name__ == '__main__':    unittest.main(exit=False)