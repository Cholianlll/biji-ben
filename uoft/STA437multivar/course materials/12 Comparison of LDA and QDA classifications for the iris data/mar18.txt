> # comparison of the LDA and QDA classifications
>
> r1 <- lda(species~lsepal+wsepal+lpetal+wpetal)
> r2 <- qda(species~lsepal+wsepal+lpetal+wpetal)
> x <- cbind(lsepal,wsepal,lpetal,wpetal)
> cov1 <- var(x[1:50,])
> cov2 <- var(x[51:100,])
> cov3 <- var(x[101:150,])
> mu1 <- apply(x[1:50,],2,mean)
> mu2 <- apply(x[51:100,],2,mean)
> mu3 <- apply(x[101:150,],2,mean)
> cov1
           lsepal      wsepal      lpetal      wpetal
lsepal 0.12424898 0.099216327 0.016355102 0.010330612
wsepal 0.09921633 0.143689796 0.011697959 0.009297959
lpetal 0.01635510 0.011697959 0.030159184 0.006069388
wpetal 0.01033061 0.009297959 0.006069388 0.011106122
> cov2
           lsepal     wsepal     lpetal     wpetal
lsepal 0.26643265 0.08518367 0.18289796 0.05577959
wsepal 0.08518367 0.09846939 0.08265306 0.04120408
lpetal 0.18289796 0.08265306 0.22081633 0.07310204
wpetal 0.05577959 0.04120408 0.07310204 0.03910612
> cov3
           lsepal     wsepal     lpetal     wpetal
lsepal 0.40434286 0.09376327 0.30328980 0.04909388
wsepal 0.09376327 0.10400408 0.07137959 0.04762857
lpetal 0.30328980 0.07137959 0.30458776 0.04882449
wpetal 0.04909388 0.04762857 0.04882449 0.07543265
> predict1 <- NULL
> predict2 <- NULL
> xnew <- mvrnorm(n=5000,mu=mu1,Sigma=cov1)
> xnew <- rbind(xnew,mvrnorm(n=5000,mu=mu2,Sigma=cov2))
> xnew <- rbind(xnew,mvrnorm(n=5000,mu=mu3,Sigma=cov3))
> for (i in 1:15000) {
+    y <- as.vector(xnew[i,])
+    newdata <- data.frame(lsepal=y[1],wsepal=y[2],lpetal=y[3],wpetal=y[4])
+    r <- predict(r1,newdata) # LDA prediction
+    predict1 <- c(predict1,r$class) 
+    r <- predict(r2,newdata) # QDA prediction
+    predict2 <- c(predict2,r$class)
+ }
> col1 <- rep("red",15000)
> col1[predict1==2] <- "blue"
> col1[predict1==3] <- "cyan"
> col2 <- rep("red",15000)
> col2[predict2==2] <- "blue"
> col2[predict2==3] <- "cyan"
> pairs(xnew,col=col1,pch=".",main="LDA classifications")
> pairs(xnew,col=col2,pch=".",main="QDA classifications")
> sum(predict1!=predict2)/15000 # percentage of different classifications
[1] 0.01213333
> # We can also look at misclassifications for the simulated data for the 
> # two methods; this appears to favour QDA although the simulated data 
> # was generated from a model where QDA is optimal.
> sum(predict1[1:5000]!=1)/5000 
[1] 0
> sum(predict1[5001:10000]!=2)/5000
[1] 0.031
> sum(predict1[10001:15000]!=3)/5000
[1] 0.0414
> sum(predict2[1:5000]!=1)/5000
[1] 0
> sum(predict2[5001:10000]!=2)/5000
[1] 0.0262
> sum(predict2[10001:15000]!=3)/5000
[1] 0.0278


